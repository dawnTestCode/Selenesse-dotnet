Selenesse is Java code that implements an elegant, efficient bridge between Fitnesse and Selenium for the purpose of managing large suites of 
browser-based User Interface tests.  (A .NET version is in the works.)

Selenesse is based on Gojko Adzic's WebTest project(*), but is both more powerful and more efficient that WebTest.  

This page is an executable example showing several unique aspects of writing tests in Selenesse:



!define baseURL {http://www.google.com}


!contents -R1 -h


The SuiteSelenesseExample.SuiteSetup page at the top level imports selenesse.jar from */lib, then starts an instance of the Selenium driver using the 
SLIM test engine in Fitnesse.

The Teardown page closes the browser at the end of the test(**).

The SuiteSelenesseExample.SuiteSetUp and SuiteSelenesseExample.TearDown pages contain commands obeyed automatically by Fitnesse for each run of the Suite. 

In SuiteSelenesseExample.SuiteSearch.TestSearch the box containing the text "Search google" is a Fitnesse script that refers to a Scenario 
in SuiteSelenesseExample.SuiteSearch.ScenarioLibrary also named "Search google". 

The SuiteSelenesseExample.SuiteSearch.ScenarioLibrary page contains the commands to drive Firefox with Selenium.  
The SuiteSelenesseExample.SuiteSearch.ScenarioLibrary page shows several interesting aspects of Selenesse that differ from Selenium as it is generally used. 

We have supplied a pause() method.  It is in the example in case you want to watch the browser operate.  All time methods in Selenesse take milliseconds as an argument.

Note the semicolon after the type() method.  In Fitnesse/SLIM, 2-argument methods are not allowed under most circumstances.  We have altered 
Fitnesse such that any time you wish to use a 2-argument Selenium method like type() or select(), you are required to put a semicolon 
after the method name.  Only methods that take 2 arguments are subject to this restriction.

Also note that Selenesse does not implement any of the Selenium verify* methods.  Instead Selenesse relies on the ensure() and check() methods native to Fitnesse. 

For example, instead of verifyTextPresent you would use: 
| ensure | isTextPresent | selenesse |

Instead of verifyText you would use: 
| check | getText | locator | text |

NOTE: extra pipes at the end of a check() line will cause a "Method not found" exception.

Using Fitnesse check() and insure() methods allows more flexibility when deciding whether any such assertions should be errors (booleans) 
or exceptions (voids). This has the added advantage of showing the expected result and the actual result upon failure, where native Selenium 
merely reports failure. 

The Fitnesse check() method means "to validate".  The Selenium check() method means "to make checked, as in a radio button".  
For this reason, use the command "makeChecked" and "makeUnChecked" to drive Selenium in this fashion. 

Aside from the changes noted here, Selenesse will pass any other native Selenium commands on to Selenium itself and will evaluate the output Selenium returns 
as either pass (green bar), fail (red bar) or exception (yellow message). 

We have included a method that allows you to retrieve anD use the current day in MM/DD/YYYY format.  Syntax is 

| $TODAY= | getToday |
| type; | someDatebox | $TODAY |

Finally, we have a method available that will click an element up to some number of times and only return failure if the first click fails.
(We have some stubborn elements in our application that only respond to multiple clicks from Selenium.) You can use this method in one of 
two ways: 

| click | locator | up to | 10 | times |
| clickUpToTimes; | locator | 10 |

(*) If you want to read about the reasoning behind starting an entirely new project with a whole new name, the story is here:
http://chrismcmahonsblog.blogspot.com/2009/11/ui-test-tool-search.html
http://chrismcmahonsblog.blogspot.com/2009/12/selenesse-nee-webtest.html

(**) At this time Selenesse leaves an instance of Firefox hanging.  We're working on it. 
